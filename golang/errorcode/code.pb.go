// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.15.6
// source: errorcode/code.proto

package errorcode

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// ModuleBaseCode 是业务模块起始错误码定义, 业务模块应该按照这个枚举定义错误码.
//
// 每个业务模块分配 1000 个错误码, 所以理论上这里的枚举应该都是 ${模块号}000 的格式.
// 历史原因不是严格按照上面的规则定义的, 但是要求后续的定义必须是 ${模块号}000 的格式.
type ModuleBaseCode int32

const (
	// MODULE_BASE_CODE_COMMON 通用错误码
	// [0, 100)
	ModuleBaseCode_MODULE_BASE_CODE_COMMON ModuleBaseCode = 0
	// MODULE_BASE_CODE_APP App模块
	// [100, 1000)
	ModuleBaseCode_MODULE_BASE_CODE_APP ModuleBaseCode = 100
	// MODULE_BASE_CODE_USER 用户模块
	// [1000, 2000)
	ModuleBaseCode_MODULE_BASE_CODE_USER ModuleBaseCode = 1000
)

// Enum value maps for ModuleBaseCode.
var (
	ModuleBaseCode_name = map[int32]string{
		0:    "MODULE_BASE_CODE_COMMON",
		100:  "MODULE_BASE_CODE_APP",
		1000: "MODULE_BASE_CODE_USER",
	}
	ModuleBaseCode_value = map[string]int32{
		"MODULE_BASE_CODE_COMMON": 0,
		"MODULE_BASE_CODE_APP":    100,
		"MODULE_BASE_CODE_USER":   1000,
	}
)

func (x ModuleBaseCode) Enum() *ModuleBaseCode {
	p := new(ModuleBaseCode)
	*p = x
	return p
}

func (x ModuleBaseCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ModuleBaseCode) Descriptor() protoreflect.EnumDescriptor {
	return file_errorcode_code_proto_enumTypes[0].Descriptor()
}

func (ModuleBaseCode) Type() protoreflect.EnumType {
	return &file_errorcode_code_proto_enumTypes[0]
}

func (x ModuleBaseCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ModuleBaseCode.Descriptor instead.
func (ModuleBaseCode) EnumDescriptor() ([]byte, []int) {
	return file_errorcode_code_proto_rawDescGZIP(), []int{0}
}

// Code 是具体错误码的定义.
//
// 名字要求是 模块名+错误码描述, 通用错误码例外.
type Code int32

const (
	// OK is returned on success.
	Code_OK Code = 0
	// CANCELED indicates the operation was canceled (typically by the caller).
	Code_CANCELED Code = 1
	// UNKNOWN error. An example of where this error may be returned is
	// if a Status value received from another address space belongs to
	// an error-space that is not known in this address space. Also
	// errors raised by APIs that do not return enough error information
	// may be converted to this error.
	Code_UNKNOWN Code = 2
	// INVALID_ARGUMENT indicates client specified an invalid argument.
	// Note that this differs from FAILED_PRECONDITION. It indicates arguments
	// that are problematic regardless of the state of the system
	// (e.g., a malformed file name).
	Code_INVALID_ARGUMENT Code = 3
	// DEADLINE_EXCEEDED means operation expired before completion.
	// For operations that change the state of the system, this error may be
	// returned even if the operation has completed successfully. For
	// example, a successful response from a server could have been delayed
	// long enough for the deadline to expire.
	Code_DEADLINE_EXCEEDED Code = 4
	// NOT_FOUND means some requested entity (e.g., file or directory) was
	// not found.
	Code_NOT_FOUND Code = 5
	// ALREADY_EXISTS means an attempt to create an entity failed because one
	// already exists.
	Code_ALREADY_EXISTS Code = 6
	// PERMISSION_DENIED indicates the caller does not have permission to
	// execute the specified operation. It must not be used for rejections
	// caused by exhausting some resource (use RESOURCE_EXHAUSTED
	// instead for those errors). It must not be
	// used if the caller cannot be identified (use UNAUTHENTICATED
	// instead for those errors).
	Code_PERMISSION_DENIED Code = 7
	// RESOURCE_EXHAUSTED indicates some resource has been exhausted, perhaps
	// a per-user quota, or perhaps the entire file system is out of space.
	Code_RESOURCE_EXHAUSTED Code = 8
	// FAILED_PRECONDITION indicates operation was rejected because the
	// system is not in a state required for the operation's execution.
	// For example, directory to be deleted may be non-empty, an rmdir
	// operation is applied to a non-directory, etc.
	//
	// A litmus test that may help a service implementor in deciding
	// between FAILED_PRECONDITION, ABORTED, and UNAVAILABLE:
	//  (a) Use UNAVAILABLE if the client can retry just the failing call.
	//  (b) Use ABORTED if the client should retry at a higher-level
	//      (e.g., restarting a read-modify-write sequence).
	//  (c) Use FAILED_PRECONDITION if the client should not retry until
	//      the system state has been explicitly fixed. E.g., if an "rmdir"
	//      fails because the directory is non-empty, FAILED_PRECONDITION
	//      should be returned since the client should not retry unless
	//      they have first fixed up the directory by deleting files from it.
	//  (d) Use FAILED_PRECONDITION if the client performs conditional
	//      REST Get/Update/Delete on a resource and the resource on the
	//      server does not match the condition. E.g., conflicting
	//      read-modify-write on the same resource.
	Code_FAILED_PRECONDITION Code = 9
	// ABORTED indicates the operation was ABORTED, typically due to a
	// concurrency issue like sequencer check failures, transaction aborts,
	// etc.
	//
	// See litmus test above for deciding between FAILED_PRECONDITION,
	// ABORTED, and UNAVAILABLE.
	Code_ABORTED Code = 10
	// OUT_OF_RANGE means operation was attempted past the valid range.
	// E.g., seeking or reading past end of file.
	//
	// Unlike INVALID_ARGUMENT, this error indicates a problem that may
	// be fixed if the system state changes. For example, a 32-bit file
	// system will generate INVALID_ARGUMENT if asked to read at an
	// offset that is not in the range [0,2^32-1], but it will generate
	// OUT_OF_RANGE if asked to read from an offset past the current
	// file size.
	//
	// There is a fair bit of overlap between FAILED_PRECONDITION and
	// OUT_OF_RANGE. We recommend using OUT_OF_RANGE (the more specific
	// error) when it applies so that callers who are iterating through
	// a space can easily look for an OUT_OF_RANGE error to detect when
	// they are done.
	Code_OUT_OF_RANGE Code = 11
	// UNIMPLEMENTED indicates operation is not implemented or not
	// supported/enabled in this service.
	Code_UNIMPLEMENTED Code = 12
	// INTERNAL errors. Means some invariants expected by underlying
	// system has been broken. If you see one of these errors,
	// something is very broken.
	Code_INTERNAL Code = 13
	// UNAVAILABLE indicates the service is currently unavailable.
	// This is a most likely a transient condition and may be corrected
	// by retrying with a backoff. Note that it is not always safe to retry
	// non-idempotent operations.
	//
	// See litmus test above for deciding between FAILED_PRECONDITION,
	// ABORTED, and UNAVAILABLE.
	Code_UNAVAILABLE Code = 14
	// DATA_LOSS indicates unrecoverable data loss or corruption.
	Code_DATA_LOSS Code = 15
	// UNAUTHENTICATED indicates the request does not have valid
	// authentication credentials for the operation.
	Code_UNAUTHENTICATED Code = 16
	// REQUEST_ENTITY_TOO_LARGE indicates the request body is too large.
	Code_REQUEST_ENTITY_TOO_LARGE Code = 17
	// RATE_LIMIT_REACHED indicates that the frequency limit has been reached.
	Code_RATE_LIMIT_REACHED Code = 18
	// DUPLICATE_REQUEST indicates that the request is a duplicate request.
	Code_DUPLICATE_REQUEST Code = 19
	// APP_NO_WECHAT_APP 未安装微信
	Code_APP_NO_WECHAT_APP Code = 100
	// APP_NO_ALIPAY_APP 未安装支付宝
	Code_APP_NO_ALIPAY_APP Code = 101
	// APP_WECHAT_SDK_NOT_INITIALIZED 微信SDK未初始化
	Code_APP_WECHAT_SDK_NOT_INITIALIZED Code = 102
	// APP_PERMISSION_JUMP_TO_SETTING 用户授权过程永远禁止后跳转到设置页面
	Code_APP_PERMISSION_JUMP_TO_SETTING Code = 103
	// APP_WECHAT_COMM_ERROR 微信授权系统错误或未知错误
	Code_APP_WECHAT_COMM_ERROR Code = 200
	// APP_WECHAT_USER_CANCEL 微信授权用户取消
	Code_APP_WECHAT_USER_CANCEL Code = 201
	// APP_WECHAT_AUTH_DENIED 微信授权用户拒绝
	Code_APP_WECHAT_AUTH_DENIED Code = 202
	// APP_APPLE_LOGIN_ERROR 苹果登录错误
	Code_APP_APPLE_LOGIN_ERROR Code = 210
	// APP_TAOBAO_COMM_ERROR 淘宝登录授权相关的通用错误
	Code_APP_TAOBAO_COMM_ERROR Code = 800
	// APP_BIND_TAOBAO_USER_CLOSE_TAOBAO_POPUP 用户主动关闭淘宝授权提示弹窗
	Code_APP_BIND_TAOBAO_USER_CLOSE_TAOBAO_POPUP Code = 806
	// APP_BIND_TAOBAO_KILL_TAOBAO_APP_PROCESS 淘宝授权过程关闭手淘客户端
	Code_APP_BIND_TAOBAO_KILL_TAOBAO_APP_PROCESS Code = 811
	// APP_TAOBAO_USER_CANCEL_LOGIN_OR_LOGIN_FAIL 用户取消登录或登录失败
	Code_APP_TAOBAO_USER_CANCEL_LOGIN_OR_LOGIN_FAIL Code = 812
	// APP_AD_CONFIG_ERROR 广告配置错误
	Code_APP_AD_CONFIG_ERROR Code = 901
	// APP_AD_NETWORK_ERROR 网络错误
	Code_APP_AD_NETWORK_ERROR Code = 902
	// APP_AD_LOAD_TIMEOUT 广告加载超时
	Code_APP_AD_LOAD_TIMEOUT Code = 903
	// APP_AD_EMPTY_OR_AD_SERVER_ERROR 广告服务端错误
	Code_APP_AD_EMPTY_OR_AD_SERVER_ERROR Code = 904
	// APP_AD_HAS_ONGOING_AD 有正在播放的广告, 不允许并发观看
	Code_APP_AD_HAS_ONGOING_AD Code = 909
	// APP_AD_USER_CLOSED_TOO_EARLY 用户提前关闭广告
	Code_APP_AD_USER_CLOSED_TOO_EARLY Code = 910
	// APP_AD_TOO_MANY_ERRORS_IN_A_SHORT_TIME 短时间里广告位有过多错误
	Code_APP_AD_TOO_MANY_ERRORS_IN_A_SHORT_TIME Code = 911
	// APP_AD_USER_QUIT_APPLICATION 用户在观看广告时退出App
	Code_APP_AD_USER_QUIT_APPLICATION Code = 912
	// USER_NO_PHONE_NUMBER 缺少 phone number
	Code_USER_NO_PHONE_NUMBER Code = 1000
	// USER_SMS_CODE_INCORRECT sms code 验证不通过
	Code_USER_SMS_CODE_INCORRECT Code = 1001
	// USER_PHONE_NUMBER_INCONSISTENT 手机号和临时用户不一致
	//
	// @deprecated: 2020-11-13 新的登录逻辑不需要这个错误了
	//
	// Deprecated: Do not use.
	Code_USER_PHONE_NUMBER_INCONSISTENT Code = 1002
	// USER_INVALID_PHONE_NUMBER 手机号不正确
	Code_USER_INVALID_PHONE_NUMBER Code = 1003
	// USER_INVALID_ALIPAY_ID 支付宝账号不正确
	Code_USER_INVALID_ALIPAY_ID Code = 1004
	// USER_DUPLICATE_PHONE_NUMBER 手机号已经被注册了
	Code_USER_DUPLICATE_PHONE_NUMBER Code = 1005
	// USER_DUPLICATE_WECHAT 微信号已经被注册了
	Code_USER_DUPLICATE_WECHAT Code = 1006
	// USER_SMS_CODE_SEND_FAILED_AND_TRY_AGAIN_LATER 发送短信验证码失败
	Code_USER_SMS_CODE_SEND_FAILED_AND_TRY_AGAIN_LATER Code = 1007
	// USER_NO_WECHAT_OAUTH_CODE 缺少 wechat oauth code
	Code_USER_NO_WECHAT_OAUTH_CODE Code = 1010
	// USER_WECHAT_OAUTH_CODE_INCORRECT wechat oauth code 不正确
	Code_USER_WECHAT_OAUTH_CODE_INCORRECT Code = 1011
	// USER_WECHAT_OAUTH_CODE_INCONSISTENT wechat oauth code 和临时用户不一致
	//
	// @deprecated: 2020-11-13 新的登录逻辑不需要这个错误了
	//
	// Deprecated: Do not use.
	Code_USER_WECHAT_OAUTH_CODE_INCONSISTENT Code = 1012
	// USER_WECHAT_UNION_ID_REQUIRED 需要有获取 unionid 的权限
	Code_USER_WECHAT_UNION_ID_REQUIRED Code = 1013
	// USER_WECHAT_USER_INFO_REQUIRED 需要有获取用户信息的权限
	Code_USER_WECHAT_USER_INFO_REQUIRED Code = 1014
	// USER_WECHAT_OAUTH_CODE_BEEN_USED wechat oauth code been used
	Code_USER_WECHAT_OAUTH_CODE_BEEN_USED Code = 1015
	// USER_NO_MENTOR 缺少 mentor
	Code_USER_NO_MENTOR Code = 1020
	// USER_MENTOR_NOT_FOUND 没有找到 mentor
	Code_USER_MENTOR_NOT_FOUND Code = 1021
	// USER_USER_HAS_ALREADY_BOUND_TAOBAO 用户已经绑定过淘宝了
	Code_USER_USER_HAS_ALREADY_BOUND_TAOBAO Code = 1022
	// USER_TAOBAO_ACCOUNT_HAS_BEEN_BOUND 淘宝账号已经被绑定了
	Code_USER_TAOBAO_ACCOUNT_HAS_BEEN_BOUND Code = 1023
	// USER_INVALID_TAOBAO_OAUTH_CODE 无效的淘宝 oauth2.0 code
	Code_USER_INVALID_TAOBAO_OAUTH_CODE Code = 1024
	// USER_TAOBAO_ACCOUNT_HAS_NO_REAL_NAME_AUTHENTICATION 淘宝账号没有实名认证
	Code_USER_TAOBAO_ACCOUNT_HAS_NO_REAL_NAME_AUTHENTICATION Code = 1025
	// USER_USER_HAS_BEEN_WROTE_OFF 用户已经被注销了
	Code_USER_USER_HAS_BEEN_WROTE_OFF Code = 1026
	// USER_TAOBAO_ACCOUNT_HAS_SECURITY_RISKS 表示用户账户存在安全隐患, 不能绑定淘宝
	Code_USER_TAOBAO_ACCOUNT_HAS_SECURITY_RISKS Code = 1027
	// USER_TAOBAO_ACCOUNT_IS_ALREADY_A_PARTNER 表示用户已经是合作方, 不能绑定淘宝
	Code_USER_TAOBAO_ACCOUNT_IS_ALREADY_A_PARTNER Code = 1028
	// USER_TAOBAO_INTERNAL_SERVER_ERROR 表示淘宝内部服务异常, 不能绑定淘宝
	Code_USER_TAOBAO_INTERNAL_SERVER_ERROR Code = 1029
	// USER_APPLE_IDENTITY_TOKEN_INVALID 无效的 apple identity token
	Code_USER_APPLE_IDENTITY_TOKEN_INVALID Code = 1030
	// USER_APPLE_IDENTITY_TOKEN_INCONSISTENT_WITH_THE_ONE_IN_LOGIN_SESSION apple identity token 和临时用户的 apple identity token 不一致
	//
	// @deprecated: 2020-11-13 新的登录逻辑不需要这个错误了
	//
	// Deprecated: Do not use.
	Code_USER_APPLE_IDENTITY_TOKEN_INCONSISTENT_WITH_THE_ONE_IN_LOGIN_SESSION Code = 1031
	// USER_APPLE_AUTHORIZATION_CODE_INVALID apple authorization code 不正确
	Code_USER_APPLE_AUTHORIZATION_CODE_INVALID Code = 1032
	// USER_APPLE_AUTHORIZATION_CODE_INCONSISTENT_WITH_THE_ONE_IN_LOGIN_SESSION apple authorization code 和临时用户的 apple authorization code 不一致
	//
	// @deprecated: 2020-11-13 新的登录逻辑不需要这个错误了
	//
	// Deprecated: Do not use.
	Code_USER_APPLE_AUTHORIZATION_CODE_INCONSISTENT_WITH_THE_ONE_IN_LOGIN_SESSION Code = 1033
	// USER_APPLE_AUTHORIZATION_CODE_BEEN_USED apple authorization code been used
	Code_USER_APPLE_AUTHORIZATION_CODE_BEEN_USED Code = 1034
	// USER_DUPLICATE_APPLE_ACCOUNT 已经存在该 apple 账号
	Code_USER_DUPLICATE_APPLE_ACCOUNT Code = 1035
	// USER_PHONE_NOT_FOUND 手机号不存在, 手机号登录的时候可能返回这个错误
	Code_USER_PHONE_NOT_FOUND Code = 1036
	// USER_NAME_AND_PASSWORD_DO_NOT_MATCH 用户名和密码不匹配, 即密码不正确, 用户名密码登录可能返回这个错误
	Code_USER_NAME_AND_PASSWORD_DO_NOT_MATCH Code = 1037
	// USER_WECHAT_NOT_FOUND 微信号不存在, 网页微信扫码登录可能返回这个错误
	Code_USER_WECHAT_NOT_FOUND Code = 1038
	// USER_INVALID_OLD_PASSWORD 无效的老密码
	Code_USER_INVALID_OLD_PASSWORD Code = 1039
	// USER_NAME_ALREADY_EXISTS 用户名已经存在了
	Code_USER_NAME_ALREADY_EXISTS Code = 1040
	// USER_HAS_UNCONFIRMED_ORDERS 注销账号失败原因, 用户当前拉回的订单中, 还有未确认收货的订单
	Code_USER_HAS_UNCONFIRMED_ORDERS Code = 1041
	// USER_THE_DURATION_FROM_THE_LAST_ORDER_CONFIRMATION_TO_NOW_IS_NOT_LARGE_ENOUGH 注销账号失败原因, 最近一笔确认收货的订单, 确认收货的时间距离现在<=30天
	Code_USER_THE_DURATION_FROM_THE_LAST_ORDER_CONFIRMATION_TO_NOW_IS_NOT_LARGE_ENOUGH Code = 1042
	// USER_WITHDRAWAL_BALANCE_IS_NEGATIVE 注销账号失败原因, 可提现余额<0
	Code_USER_WITHDRAWAL_BALANCE_IS_NEGATIVE Code = 1043
	// USER_INVALID_USER_TOKEN 表示用户 token 无效
	Code_USER_INVALID_USER_TOKEN Code = 1044
	// USER_INVALID_JOB_ID_OF_BIND_TAOBAO_ASYNC 无效的异步绑定淘宝请求JobID
	Code_USER_INVALID_JOB_ID_OF_BIND_TAOBAO_ASYNC Code = 1045
)

// Enum value maps for Code.
var (
	Code_name = map[int32]string{
		0:    "OK",
		1:    "CANCELED",
		2:    "UNKNOWN",
		3:    "INVALID_ARGUMENT",
		4:    "DEADLINE_EXCEEDED",
		5:    "NOT_FOUND",
		6:    "ALREADY_EXISTS",
		7:    "PERMISSION_DENIED",
		8:    "RESOURCE_EXHAUSTED",
		9:    "FAILED_PRECONDITION",
		10:   "ABORTED",
		11:   "OUT_OF_RANGE",
		12:   "UNIMPLEMENTED",
		13:   "INTERNAL",
		14:   "UNAVAILABLE",
		15:   "DATA_LOSS",
		16:   "UNAUTHENTICATED",
		17:   "REQUEST_ENTITY_TOO_LARGE",
		18:   "RATE_LIMIT_REACHED",
		19:   "DUPLICATE_REQUEST",
		100:  "APP_NO_WECHAT_APP",
		101:  "APP_NO_ALIPAY_APP",
		102:  "APP_WECHAT_SDK_NOT_INITIALIZED",
		103:  "APP_PERMISSION_JUMP_TO_SETTING",
		200:  "APP_WECHAT_COMM_ERROR",
		201:  "APP_WECHAT_USER_CANCEL",
		202:  "APP_WECHAT_AUTH_DENIED",
		210:  "APP_APPLE_LOGIN_ERROR",
		800:  "APP_TAOBAO_COMM_ERROR",
		806:  "APP_BIND_TAOBAO_USER_CLOSE_TAOBAO_POPUP",
		811:  "APP_BIND_TAOBAO_KILL_TAOBAO_APP_PROCESS",
		812:  "APP_TAOBAO_USER_CANCEL_LOGIN_OR_LOGIN_FAIL",
		901:  "APP_AD_CONFIG_ERROR",
		902:  "APP_AD_NETWORK_ERROR",
		903:  "APP_AD_LOAD_TIMEOUT",
		904:  "APP_AD_EMPTY_OR_AD_SERVER_ERROR",
		909:  "APP_AD_HAS_ONGOING_AD",
		910:  "APP_AD_USER_CLOSED_TOO_EARLY",
		911:  "APP_AD_TOO_MANY_ERRORS_IN_A_SHORT_TIME",
		912:  "APP_AD_USER_QUIT_APPLICATION",
		1000: "USER_NO_PHONE_NUMBER",
		1001: "USER_SMS_CODE_INCORRECT",
		1002: "USER_PHONE_NUMBER_INCONSISTENT",
		1003: "USER_INVALID_PHONE_NUMBER",
		1004: "USER_INVALID_ALIPAY_ID",
		1005: "USER_DUPLICATE_PHONE_NUMBER",
		1006: "USER_DUPLICATE_WECHAT",
		1007: "USER_SMS_CODE_SEND_FAILED_AND_TRY_AGAIN_LATER",
		1010: "USER_NO_WECHAT_OAUTH_CODE",
		1011: "USER_WECHAT_OAUTH_CODE_INCORRECT",
		1012: "USER_WECHAT_OAUTH_CODE_INCONSISTENT",
		1013: "USER_WECHAT_UNION_ID_REQUIRED",
		1014: "USER_WECHAT_USER_INFO_REQUIRED",
		1015: "USER_WECHAT_OAUTH_CODE_BEEN_USED",
		1020: "USER_NO_MENTOR",
		1021: "USER_MENTOR_NOT_FOUND",
		1022: "USER_USER_HAS_ALREADY_BOUND_TAOBAO",
		1023: "USER_TAOBAO_ACCOUNT_HAS_BEEN_BOUND",
		1024: "USER_INVALID_TAOBAO_OAUTH_CODE",
		1025: "USER_TAOBAO_ACCOUNT_HAS_NO_REAL_NAME_AUTHENTICATION",
		1026: "USER_USER_HAS_BEEN_WROTE_OFF",
		1027: "USER_TAOBAO_ACCOUNT_HAS_SECURITY_RISKS",
		1028: "USER_TAOBAO_ACCOUNT_IS_ALREADY_A_PARTNER",
		1029: "USER_TAOBAO_INTERNAL_SERVER_ERROR",
		1030: "USER_APPLE_IDENTITY_TOKEN_INVALID",
		1031: "USER_APPLE_IDENTITY_TOKEN_INCONSISTENT_WITH_THE_ONE_IN_LOGIN_SESSION",
		1032: "USER_APPLE_AUTHORIZATION_CODE_INVALID",
		1033: "USER_APPLE_AUTHORIZATION_CODE_INCONSISTENT_WITH_THE_ONE_IN_LOGIN_SESSION",
		1034: "USER_APPLE_AUTHORIZATION_CODE_BEEN_USED",
		1035: "USER_DUPLICATE_APPLE_ACCOUNT",
		1036: "USER_PHONE_NOT_FOUND",
		1037: "USER_NAME_AND_PASSWORD_DO_NOT_MATCH",
		1038: "USER_WECHAT_NOT_FOUND",
		1039: "USER_INVALID_OLD_PASSWORD",
		1040: "USER_NAME_ALREADY_EXISTS",
		1041: "USER_HAS_UNCONFIRMED_ORDERS",
		1042: "USER_THE_DURATION_FROM_THE_LAST_ORDER_CONFIRMATION_TO_NOW_IS_NOT_LARGE_ENOUGH",
		1043: "USER_WITHDRAWAL_BALANCE_IS_NEGATIVE",
		1044: "USER_INVALID_USER_TOKEN",
		1045: "USER_INVALID_JOB_ID_OF_BIND_TAOBAO_ASYNC",
	}
	Code_value = map[string]int32{
		"OK":                                      0,
		"CANCELED":                                1,
		"UNKNOWN":                                 2,
		"INVALID_ARGUMENT":                        3,
		"DEADLINE_EXCEEDED":                       4,
		"NOT_FOUND":                               5,
		"ALREADY_EXISTS":                          6,
		"PERMISSION_DENIED":                       7,
		"RESOURCE_EXHAUSTED":                      8,
		"FAILED_PRECONDITION":                     9,
		"ABORTED":                                 10,
		"OUT_OF_RANGE":                            11,
		"UNIMPLEMENTED":                           12,
		"INTERNAL":                                13,
		"UNAVAILABLE":                             14,
		"DATA_LOSS":                               15,
		"UNAUTHENTICATED":                         16,
		"REQUEST_ENTITY_TOO_LARGE":                17,
		"RATE_LIMIT_REACHED":                      18,
		"DUPLICATE_REQUEST":                       19,
		"APP_NO_WECHAT_APP":                       100,
		"APP_NO_ALIPAY_APP":                       101,
		"APP_WECHAT_SDK_NOT_INITIALIZED":          102,
		"APP_PERMISSION_JUMP_TO_SETTING":          103,
		"APP_WECHAT_COMM_ERROR":                   200,
		"APP_WECHAT_USER_CANCEL":                  201,
		"APP_WECHAT_AUTH_DENIED":                  202,
		"APP_APPLE_LOGIN_ERROR":                   210,
		"APP_TAOBAO_COMM_ERROR":                   800,
		"APP_BIND_TAOBAO_USER_CLOSE_TAOBAO_POPUP": 806,
		"APP_BIND_TAOBAO_KILL_TAOBAO_APP_PROCESS": 811,
		"APP_TAOBAO_USER_CANCEL_LOGIN_OR_LOGIN_FAIL":                               812,
		"APP_AD_CONFIG_ERROR":                                                      901,
		"APP_AD_NETWORK_ERROR":                                                     902,
		"APP_AD_LOAD_TIMEOUT":                                                      903,
		"APP_AD_EMPTY_OR_AD_SERVER_ERROR":                                          904,
		"APP_AD_HAS_ONGOING_AD":                                                    909,
		"APP_AD_USER_CLOSED_TOO_EARLY":                                             910,
		"APP_AD_TOO_MANY_ERRORS_IN_A_SHORT_TIME":                                   911,
		"APP_AD_USER_QUIT_APPLICATION":                                             912,
		"USER_NO_PHONE_NUMBER":                                                     1000,
		"USER_SMS_CODE_INCORRECT":                                                  1001,
		"USER_PHONE_NUMBER_INCONSISTENT":                                           1002,
		"USER_INVALID_PHONE_NUMBER":                                                1003,
		"USER_INVALID_ALIPAY_ID":                                                   1004,
		"USER_DUPLICATE_PHONE_NUMBER":                                              1005,
		"USER_DUPLICATE_WECHAT":                                                    1006,
		"USER_SMS_CODE_SEND_FAILED_AND_TRY_AGAIN_LATER":                            1007,
		"USER_NO_WECHAT_OAUTH_CODE":                                                1010,
		"USER_WECHAT_OAUTH_CODE_INCORRECT":                                         1011,
		"USER_WECHAT_OAUTH_CODE_INCONSISTENT":                                      1012,
		"USER_WECHAT_UNION_ID_REQUIRED":                                            1013,
		"USER_WECHAT_USER_INFO_REQUIRED":                                           1014,
		"USER_WECHAT_OAUTH_CODE_BEEN_USED":                                         1015,
		"USER_NO_MENTOR":                                                           1020,
		"USER_MENTOR_NOT_FOUND":                                                    1021,
		"USER_USER_HAS_ALREADY_BOUND_TAOBAO":                                       1022,
		"USER_TAOBAO_ACCOUNT_HAS_BEEN_BOUND":                                       1023,
		"USER_INVALID_TAOBAO_OAUTH_CODE":                                           1024,
		"USER_TAOBAO_ACCOUNT_HAS_NO_REAL_NAME_AUTHENTICATION":                      1025,
		"USER_USER_HAS_BEEN_WROTE_OFF":                                             1026,
		"USER_TAOBAO_ACCOUNT_HAS_SECURITY_RISKS":                                   1027,
		"USER_TAOBAO_ACCOUNT_IS_ALREADY_A_PARTNER":                                 1028,
		"USER_TAOBAO_INTERNAL_SERVER_ERROR":                                        1029,
		"USER_APPLE_IDENTITY_TOKEN_INVALID":                                        1030,
		"USER_APPLE_IDENTITY_TOKEN_INCONSISTENT_WITH_THE_ONE_IN_LOGIN_SESSION":     1031,
		"USER_APPLE_AUTHORIZATION_CODE_INVALID":                                    1032,
		"USER_APPLE_AUTHORIZATION_CODE_INCONSISTENT_WITH_THE_ONE_IN_LOGIN_SESSION": 1033,
		"USER_APPLE_AUTHORIZATION_CODE_BEEN_USED":                                  1034,
		"USER_DUPLICATE_APPLE_ACCOUNT":                                             1035,
		"USER_PHONE_NOT_FOUND":                                                     1036,
		"USER_NAME_AND_PASSWORD_DO_NOT_MATCH":                                      1037,
		"USER_WECHAT_NOT_FOUND":                                                    1038,
		"USER_INVALID_OLD_PASSWORD":                                                1039,
		"USER_NAME_ALREADY_EXISTS":                                                 1040,
		"USER_HAS_UNCONFIRMED_ORDERS":                                              1041,
		"USER_THE_DURATION_FROM_THE_LAST_ORDER_CONFIRMATION_TO_NOW_IS_NOT_LARGE_ENOUGH": 1042,
		"USER_WITHDRAWAL_BALANCE_IS_NEGATIVE":                                           1043,
		"USER_INVALID_USER_TOKEN":                                                       1044,
		"USER_INVALID_JOB_ID_OF_BIND_TAOBAO_ASYNC":                                      1045,
	}
)

func (x Code) Enum() *Code {
	p := new(Code)
	*p = x
	return p
}

func (x Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Code) Descriptor() protoreflect.EnumDescriptor {
	return file_errorcode_code_proto_enumTypes[1].Descriptor()
}

func (Code) Type() protoreflect.EnumType {
	return &file_errorcode_code_proto_enumTypes[1]
}

func (x Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Code.Descriptor instead.
func (Code) EnumDescriptor() ([]byte, []int) {
	return file_errorcode_code_proto_rawDescGZIP(), []int{1}
}

var File_errorcode_code_proto protoreflect.FileDescriptor

var file_errorcode_code_proto_rawDesc = []byte{
	0x0a, 0x14, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x2f, 0x63, 0x6f, 0x64, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64,
	0x65, 0x2a, 0x63, 0x0a, 0x0e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x61, 0x73, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x42, 0x41,
	0x53, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x4f, 0x4e, 0x10, 0x00,
	0x12, 0x18, 0x0a, 0x14, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x5f,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x50, 0x50, 0x10, 0x64, 0x12, 0x1a, 0x0a, 0x15, 0x4d, 0x4f,
	0x44, 0x55, 0x4c, 0x45, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x55,
	0x53, 0x45, 0x52, 0x10, 0xe8, 0x07, 0x2a, 0xeb, 0x14, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x41, 0x4e, 0x43, 0x45,
	0x4c, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x41, 0x52,
	0x47, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x45, 0x41, 0x44,
	0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x04, 0x12,
	0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x05, 0x12, 0x12,
	0x0a, 0x0e, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53,
	0x10, 0x06, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0x07, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x45, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x45, 0x58, 0x48, 0x41, 0x55, 0x53, 0x54, 0x45, 0x44, 0x10,
	0x08, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x50, 0x52, 0x45, 0x43,
	0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x09, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x42,
	0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x0a, 0x12, 0x10, 0x0a, 0x0c, 0x4f, 0x55, 0x54, 0x5f, 0x4f,
	0x46, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x0b, 0x12, 0x11, 0x0a, 0x0d, 0x55, 0x4e, 0x49,
	0x4d, 0x50, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x45, 0x44, 0x10, 0x0c, 0x12, 0x0c, 0x0a, 0x08,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10, 0x0d, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e,
	0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x0e, 0x12, 0x0d, 0x0a, 0x09, 0x44,
	0x41, 0x54, 0x41, 0x5f, 0x4c, 0x4f, 0x53, 0x53, 0x10, 0x0f, 0x12, 0x13, 0x0a, 0x0f, 0x55, 0x4e,
	0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x45, 0x44, 0x10, 0x10, 0x12,
	0x1c, 0x0a, 0x18, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x49, 0x54,
	0x59, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x4c, 0x41, 0x52, 0x47, 0x45, 0x10, 0x11, 0x12, 0x16, 0x0a,
	0x12, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x43,
	0x48, 0x45, 0x44, 0x10, 0x12, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41,
	0x54, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x13, 0x12, 0x15, 0x0a, 0x11,
	0x41, 0x50, 0x50, 0x5f, 0x4e, 0x4f, 0x5f, 0x57, 0x45, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x41, 0x50,
	0x50, 0x10, 0x64, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x50, 0x50, 0x5f, 0x4e, 0x4f, 0x5f, 0x41, 0x4c,
	0x49, 0x50, 0x41, 0x59, 0x5f, 0x41, 0x50, 0x50, 0x10, 0x65, 0x12, 0x22, 0x0a, 0x1e, 0x41, 0x50,
	0x50, 0x5f, 0x57, 0x45, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x53, 0x44, 0x4b, 0x5f, 0x4e, 0x4f, 0x54,
	0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x66, 0x12, 0x22,
	0x0a, 0x1e, 0x41, 0x50, 0x50, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x4a, 0x55, 0x4d, 0x50, 0x5f, 0x54, 0x4f, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47,
	0x10, 0x67, 0x12, 0x1a, 0x0a, 0x15, 0x41, 0x50, 0x50, 0x5f, 0x57, 0x45, 0x43, 0x48, 0x41, 0x54,
	0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0xc8, 0x01, 0x12, 0x1b,
	0x0a, 0x16, 0x41, 0x50, 0x50, 0x5f, 0x57, 0x45, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x10, 0xc9, 0x01, 0x12, 0x1b, 0x0a, 0x16, 0x41,
	0x50, 0x50, 0x5f, 0x57, 0x45, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x44,
	0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0xca, 0x01, 0x12, 0x1a, 0x0a, 0x15, 0x41, 0x50, 0x50, 0x5f,
	0x41, 0x50, 0x50, 0x4c, 0x45, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x10, 0xd2, 0x01, 0x12, 0x1a, 0x0a, 0x15, 0x41, 0x50, 0x50, 0x5f, 0x54, 0x41, 0x4f, 0x42,
	0x41, 0x4f, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0xa0, 0x06,
	0x12, 0x2c, 0x0a, 0x27, 0x41, 0x50, 0x50, 0x5f, 0x42, 0x49, 0x4e, 0x44, 0x5f, 0x54, 0x41, 0x4f,
	0x42, 0x41, 0x4f, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x5f, 0x54,
	0x41, 0x4f, 0x42, 0x41, 0x4f, 0x5f, 0x50, 0x4f, 0x50, 0x55, 0x50, 0x10, 0xa6, 0x06, 0x12, 0x2c,
	0x0a, 0x27, 0x41, 0x50, 0x50, 0x5f, 0x42, 0x49, 0x4e, 0x44, 0x5f, 0x54, 0x41, 0x4f, 0x42, 0x41,
	0x4f, 0x5f, 0x4b, 0x49, 0x4c, 0x4c, 0x5f, 0x54, 0x41, 0x4f, 0x42, 0x41, 0x4f, 0x5f, 0x41, 0x50,
	0x50, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x10, 0xab, 0x06, 0x12, 0x2f, 0x0a, 0x2a,
	0x41, 0x50, 0x50, 0x5f, 0x54, 0x41, 0x4f, 0x42, 0x41, 0x4f, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x4f, 0x52, 0x5f,
	0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10, 0xac, 0x06, 0x12, 0x18, 0x0a,
	0x13, 0x41, 0x50, 0x50, 0x5f, 0x41, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0x85, 0x07, 0x12, 0x19, 0x0a, 0x14, 0x41, 0x50, 0x50, 0x5f, 0x41,
	0x44, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0x86, 0x07, 0x12, 0x18, 0x0a, 0x13, 0x41, 0x50, 0x50, 0x5f, 0x41, 0x44, 0x5f, 0x4c, 0x4f, 0x41,
	0x44, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x87, 0x07, 0x12, 0x24, 0x0a, 0x1f,
	0x41, 0x50, 0x50, 0x5f, 0x41, 0x44, 0x5f, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x5f, 0x4f, 0x52, 0x5f,
	0x41, 0x44, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0x88, 0x07, 0x12, 0x1a, 0x0a, 0x15, 0x41, 0x50, 0x50, 0x5f, 0x41, 0x44, 0x5f, 0x48, 0x41, 0x53,
	0x5f, 0x4f, 0x4e, 0x47, 0x4f, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x44, 0x10, 0x8d, 0x07, 0x12, 0x21,
	0x0a, 0x1c, 0x41, 0x50, 0x50, 0x5f, 0x41, 0x44, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x4c,
	0x4f, 0x53, 0x45, 0x44, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x45, 0x41, 0x52, 0x4c, 0x59, 0x10, 0x8e,
	0x07, 0x12, 0x2b, 0x0a, 0x26, 0x41, 0x50, 0x50, 0x5f, 0x41, 0x44, 0x5f, 0x54, 0x4f, 0x4f, 0x5f,
	0x4d, 0x41, 0x4e, 0x59, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x53, 0x5f, 0x49, 0x4e, 0x5f, 0x41,
	0x5f, 0x53, 0x48, 0x4f, 0x52, 0x54, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x8f, 0x07, 0x12, 0x21,
	0x0a, 0x1c, 0x41, 0x50, 0x50, 0x5f, 0x41, 0x44, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x51, 0x55,
	0x49, 0x54, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x90,
	0x07, 0x12, 0x19, 0x0a, 0x14, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x5f, 0x50, 0x48, 0x4f,
	0x4e, 0x45, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x10, 0xe8, 0x07, 0x12, 0x1c, 0x0a, 0x17,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x53, 0x4d, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4e,
	0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x10, 0xe9, 0x07, 0x12, 0x27, 0x0a, 0x1e, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x5f,
	0x49, 0x4e, 0x43, 0x4f, 0x4e, 0x53, 0x49, 0x53, 0x54, 0x45, 0x4e, 0x54, 0x10, 0xea, 0x07, 0x1a,
	0x02, 0x08, 0x01, 0x12, 0x1e, 0x0a, 0x19, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52,
	0x10, 0xeb, 0x07, 0x12, 0x1b, 0x0a, 0x16, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x41, 0x4c, 0x49, 0x50, 0x41, 0x59, 0x5f, 0x49, 0x44, 0x10, 0xec, 0x07,
	0x12, 0x20, 0x0a, 0x1b, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41,
	0x54, 0x45, 0x5f, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x10,
	0xed, 0x07, 0x12, 0x1a, 0x0a, 0x15, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x44, 0x55, 0x50, 0x4c, 0x49,
	0x43, 0x41, 0x54, 0x45, 0x5f, 0x57, 0x45, 0x43, 0x48, 0x41, 0x54, 0x10, 0xee, 0x07, 0x12, 0x32,
	0x0a, 0x2d, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x53, 0x4d, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f,
	0x53, 0x45, 0x4e, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x41, 0x4e, 0x44, 0x5f,
	0x54, 0x52, 0x59, 0x5f, 0x41, 0x47, 0x41, 0x49, 0x4e, 0x5f, 0x4c, 0x41, 0x54, 0x45, 0x52, 0x10,
	0xef, 0x07, 0x12, 0x1e, 0x0a, 0x19, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x5f, 0x57, 0x45,
	0x43, 0x48, 0x41, 0x54, 0x5f, 0x4f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10,
	0xf2, 0x07, 0x12, 0x25, 0x0a, 0x20, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x57, 0x45, 0x43, 0x48, 0x41,
	0x54, 0x5f, 0x4f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4e, 0x43,
	0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x10, 0xf3, 0x07, 0x12, 0x2c, 0x0a, 0x23, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x57, 0x45, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x4f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4e, 0x43, 0x4f, 0x4e, 0x53, 0x49, 0x53, 0x54, 0x45, 0x4e, 0x54,
	0x10, 0xf4, 0x07, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x22, 0x0a, 0x1d, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x57, 0x45, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x55, 0x4e, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f,
	0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0xf5, 0x07, 0x12, 0x23, 0x0a, 0x1e, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x57, 0x45, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0xf6, 0x07,
	0x12, 0x25, 0x0a, 0x20, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x57, 0x45, 0x43, 0x48, 0x41, 0x54, 0x5f,
	0x4f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x42, 0x45, 0x45, 0x4e, 0x5f,
	0x55, 0x53, 0x45, 0x44, 0x10, 0xf7, 0x07, 0x12, 0x13, 0x0a, 0x0e, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x4e, 0x4f, 0x5f, 0x4d, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x10, 0xfc, 0x07, 0x12, 0x1a, 0x0a, 0x15,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x4d, 0x45, 0x4e, 0x54, 0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0xfd, 0x07, 0x12, 0x27, 0x0a, 0x22, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x48, 0x41, 0x53, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44,
	0x59, 0x5f, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x54, 0x41, 0x4f, 0x42, 0x41, 0x4f, 0x10, 0xfe,
	0x07, 0x12, 0x27, 0x0a, 0x22, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x41, 0x4f, 0x42, 0x41, 0x4f,
	0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x48, 0x41, 0x53, 0x5f, 0x42, 0x45, 0x45,
	0x4e, 0x5f, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0xff, 0x07, 0x12, 0x23, 0x0a, 0x1e, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x54, 0x41, 0x4f, 0x42, 0x41,
	0x4f, 0x5f, 0x4f, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x80, 0x08, 0x12,
	0x38, 0x0a, 0x33, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x41, 0x4f, 0x42, 0x41, 0x4f, 0x5f, 0x41,
	0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x48, 0x41, 0x53, 0x5f, 0x4e, 0x4f, 0x5f, 0x52, 0x45,
	0x41, 0x4c, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x81, 0x08, 0x12, 0x21, 0x0a, 0x1c, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x48, 0x41, 0x53, 0x5f, 0x42, 0x45, 0x45, 0x4e, 0x5f,
	0x57, 0x52, 0x4f, 0x54, 0x45, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0x82, 0x08, 0x12, 0x2b, 0x0a, 0x26,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x41, 0x4f, 0x42, 0x41, 0x4f, 0x5f, 0x41, 0x43, 0x43, 0x4f,
	0x55, 0x4e, 0x54, 0x5f, 0x48, 0x41, 0x53, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x52, 0x49, 0x53, 0x4b, 0x53, 0x10, 0x83, 0x08, 0x12, 0x2d, 0x0a, 0x28, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x54, 0x41, 0x4f, 0x42, 0x41, 0x4f, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54,
	0x5f, 0x49, 0x53, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x41, 0x5f, 0x50, 0x41,
	0x52, 0x54, 0x4e, 0x45, 0x52, 0x10, 0x84, 0x08, 0x12, 0x26, 0x0a, 0x21, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x54, 0x41, 0x4f, 0x42, 0x41, 0x4f, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c,
	0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x85, 0x08,
	0x12, 0x26, 0x0a, 0x21, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x45, 0x5f, 0x49,
	0x44, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x86, 0x08, 0x12, 0x4d, 0x0a, 0x44, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x41, 0x50, 0x50, 0x4c, 0x45, 0x5f, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f,
	0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x49, 0x4e, 0x43, 0x4f, 0x4e, 0x53, 0x49, 0x53, 0x54, 0x45,
	0x4e, 0x54, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x54, 0x48, 0x45, 0x5f, 0x4f, 0x4e, 0x45, 0x5f,
	0x49, 0x4e, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e,
	0x10, 0x87, 0x08, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x2a, 0x0a, 0x25, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x41, 0x50, 0x50, 0x4c, 0x45, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x10, 0x88, 0x08, 0x12, 0x51, 0x0a, 0x48, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x41, 0x50, 0x50, 0x4c,
	0x45, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4e, 0x43, 0x4f, 0x4e, 0x53, 0x49, 0x53, 0x54, 0x45, 0x4e,
	0x54, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x54, 0x48, 0x45, 0x5f, 0x4f, 0x4e, 0x45, 0x5f, 0x49,
	0x4e, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10,
	0x89, 0x08, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x2c, 0x0a, 0x27, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x41,
	0x50, 0x50, 0x4c, 0x45, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x42, 0x45, 0x45, 0x4e, 0x5f, 0x55, 0x53, 0x45,
	0x44, 0x10, 0x8a, 0x08, 0x12, 0x21, 0x0a, 0x1c, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x44, 0x55, 0x50,
	0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x10, 0x8b, 0x08, 0x12, 0x19, 0x0a, 0x14, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x50, 0x48, 0x4f, 0x4e, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10,
	0x8c, 0x08, 0x12, 0x28, 0x0a, 0x23, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f,
	0x41, 0x4e, 0x44, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x5f, 0x44, 0x4f, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x8d, 0x08, 0x12, 0x1a, 0x0a, 0x15,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x57, 0x45, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x8e, 0x08, 0x12, 0x1e, 0x0a, 0x19, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4f, 0x4c, 0x44, 0x5f, 0x50, 0x41, 0x53,
	0x53, 0x57, 0x4f, 0x52, 0x44, 0x10, 0x8f, 0x08, 0x12, 0x1d, 0x0a, 0x18, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x45, 0x58,
	0x49, 0x53, 0x54, 0x53, 0x10, 0x90, 0x08, 0x12, 0x20, 0x0a, 0x1b, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x48, 0x41, 0x53, 0x5f, 0x55, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x45, 0x44, 0x5f,
	0x4f, 0x52, 0x44, 0x45, 0x52, 0x53, 0x10, 0x91, 0x08, 0x12, 0x52, 0x0a, 0x4d, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x54, 0x48, 0x45, 0x5f, 0x44, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46,
	0x52, 0x4f, 0x4d, 0x5f, 0x54, 0x48, 0x45, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x4f, 0x52, 0x44,
	0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x54, 0x4f, 0x5f, 0x4e, 0x4f, 0x57, 0x5f, 0x49, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x4c, 0x41,
	0x52, 0x47, 0x45, 0x5f, 0x45, 0x4e, 0x4f, 0x55, 0x47, 0x48, 0x10, 0x92, 0x08, 0x12, 0x28, 0x0a,
	0x23, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41, 0x57, 0x41, 0x4c,
	0x5f, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x49, 0x53, 0x5f, 0x4e, 0x45, 0x47, 0x41,
	0x54, 0x49, 0x56, 0x45, 0x10, 0x93, 0x08, 0x12, 0x1c, 0x0a, 0x17, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x4f, 0x4b,
	0x45, 0x4e, 0x10, 0x94, 0x08, 0x12, 0x2d, 0x0a, 0x28, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4a, 0x4f, 0x42, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x46, 0x5f,
	0x42, 0x49, 0x4e, 0x44, 0x5f, 0x54, 0x41, 0x4f, 0x42, 0x41, 0x4f, 0x5f, 0x41, 0x53, 0x59, 0x4e,
	0x43, 0x10, 0x95, 0x08, 0x42, 0x36, 0x5a, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x61, 0x6e, 0x79, 0x2d, 0x6c, 0x79, 0x75, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x5f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x67, 0x6f, 0x6c, 0x61,
	0x6e, 0x67, 0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_errorcode_code_proto_rawDescOnce sync.Once
	file_errorcode_code_proto_rawDescData = file_errorcode_code_proto_rawDesc
)

func file_errorcode_code_proto_rawDescGZIP() []byte {
	file_errorcode_code_proto_rawDescOnce.Do(func() {
		file_errorcode_code_proto_rawDescData = protoimpl.X.CompressGZIP(file_errorcode_code_proto_rawDescData)
	})
	return file_errorcode_code_proto_rawDescData
}

var file_errorcode_code_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_errorcode_code_proto_goTypes = []interface{}{
	(ModuleBaseCode)(0), // 0: errorcode.ModuleBaseCode
	(Code)(0),           // 1: errorcode.Code
}
var file_errorcode_code_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_errorcode_code_proto_init() }
func file_errorcode_code_proto_init() {
	if File_errorcode_code_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_errorcode_code_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_errorcode_code_proto_goTypes,
		DependencyIndexes: file_errorcode_code_proto_depIdxs,
		EnumInfos:         file_errorcode_code_proto_enumTypes,
	}.Build()
	File_errorcode_code_proto = out.File
	file_errorcode_code_proto_rawDesc = nil
	file_errorcode_code_proto_goTypes = nil
	file_errorcode_code_proto_depIdxs = nil
}
