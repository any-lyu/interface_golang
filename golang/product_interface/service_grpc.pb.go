// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package product_interface

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	proto "google.golang.org/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion5

// DefaultClient is the client API for Default service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DefaultClient interface {
	// SpuCount SpuCountRequest
	SpuCount(ctx context.Context, in *SpuCountRequest) (*SpuCountReply, error)
}

type defaultClient struct {
	cc interface {
		Invoke(ctx context.Context, method string, args, reply proto.Message) error
	}
}

func NewDefaultClient(cc interface {
	Invoke(ctx context.Context, method string, args, reply proto.Message) error
}) DefaultClient {
	return &defaultClient{cc}
}

func (c *defaultClient) SpuCount(ctx context.Context, in *SpuCountRequest) (*SpuCountReply, error) {
	out := new(SpuCountReply)
	err := c.cc.Invoke(ctx, "/product.Default/SpuCount", in, out)
	return out, err
}

// DefaultServer is the server API for Default service.
type DefaultServer interface {
	// SpuCount SpuCountRequest
	SpuCount(context.Context, *SpuCountRequest) (*SpuCountReply, error)
}

// UnimplementedDefaultServer can be embedded to have forward compatible implementations.
type UnimplementedDefaultServer struct {
}

func (*UnimplementedDefaultServer) SpuCount(context.Context, *SpuCountRequest) (*SpuCountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SpuCount not implemented")
}

func RegisterDefaultServer(s interface {
	RegisterService(sd *grpc.ServiceDesc, ss interface{})
}, srv DefaultServer) {
	s.RegisterService(&_Default_serviceDesc, srv)
}

func _Default_SpuCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpuCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DefaultServer).SpuCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.Default/SpuCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DefaultServer).SpuCount(ctx, req.(*SpuCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Default_serviceDesc = grpc.ServiceDesc{
	ServiceName: "product.Default",
	HandlerType: (*DefaultServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SpuCount",
			Handler:    _Default_SpuCount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "product/service.proto",
}
